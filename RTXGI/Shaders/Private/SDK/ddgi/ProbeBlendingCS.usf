/*
* Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
*
* NVIDIA CORPORATION and its licensors retain all intellectual property
* and proprietary rights in and to this software, related documentation
* and any modifications thereto.  Any use, reproduction, disclosure or
* distribution of this software and related documentation without an express
* license agreement from NVIDIA CORPORATION is strictly prohibited.
*/

// REQUIRED SHADER DEFINES ---------------------------------------------------------------

// PROBE_NUM_TEXELS must be passed in as a define at shader compilation time.
// This define specifies the number of texels of a single dimension of a probe.
// #define PROBE_NUM_TEXELS 6   // probe irradiance is 6x6 texels
// #define PROBE_NUM_TEXELS 14  // probe distance data is 14x14 texels

// PROBE_DATA_REGISTER must be passed in as a define at shader compilation time.
// This define specifies what register the DDGIVolume's probe data is bound to (matching the root signature).
// #define PROBE_DATA_REGISTER u2

// RAYS_PER_PROBE must be passed in, as a define at shader compilation time, *when using shared memory*.
// This define specifies the number of rays that are cast per probe and will determine how data
// is cooperatively loaded, computed, and stored in shared memory.
// #define RAYS_PER_PROBE 144

// For example usage, see Harness.cpp::CompileVolumeShaders() in the Test Harness.

// --------------------------------------------------------------------------------------

#include "/Engine/Private/Common.ush"
#include "ProbeCommon.ush"

int ProbeIndexStart;
int ProbeIndexCount;

// Probe ray radiance and hit distance
RWTexture2D<float4> DDGIVolumeRayDataUAV;

// Probe irradiance or filtered distance
RWTexture2D<float4> DDGIVolumeProbeDataUAV;

#if RTXGI_DDGI_PROBE_CLASSIFICATION
// Probe states
Texture2D<uint>     DDGIVolumeProbeStatesTexture;
#endif

#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
RWTexture2D<uint>   DDGIProbeScrollSpace;
#endif

#if RTXGI_DDGI_SHARED_MEMORY
// Shared Memory (example for default settings):
// Radiance (float3) x 144 rays/probe = 432 floats (~1.7 KB)
// Distance (float) x 144 rays/probe = 144 floats (~0.56 KB)
// Ray Directions (float3 x 144 rays/probe) = 432 floats (~1.7 KB)
//
// Max shared memory usage = ~3.96 KB (~1.7 KB radiance + ~0.56 KB distance + ~1.7 KB directions)

// Example usage:
// Irradiance thread groups as 6 x 6 = 36 threads
//     Group threads load 144 ray radiance & distance values / 36 threads = 4 ray radiance & distance values / thread
//     Group threads compute 144 ray directions / 36 threads = 4 directions / thread
// Distance thread groups are 14 x 14 = 196 threads
//     Group threads load 144 ray distances / 196 threads = ~0.73 ray distance values / thread
//     Group threads compute 144 ray directions / 196 threads = ~0.73 ray directions / thread

#if RTXGI_DDGI_BLEND_RADIANCE
groupshared float3 RayRadiance[RAYS_PER_PROBE];
#endif
groupshared float  RayDistance[RAYS_PER_PROBE];
groupshared float3 RayDirection[RAYS_PER_PROBE];
#endif

[numthreads(PROBE_NUM_TEXELS, PROBE_NUM_TEXELS, 1)]
void DDGIProbeBlendingCS(uint3 DispatchThreadID : SV_DispatchThreadID, uint GroupIndex : SV_GroupIndex)
{
    // This is needed since we can't really early out before GroupMemoryBarrierWithGroupSync() is called,
    // even though we know that in this shader probeIndex has the same value within a thread group and so
    // the whole thread group would either early out or not.
    bool exitEarly = false;

    float4 result = float4(0.f, 0.f, 0.f, 0.f);

    // Find the index of the probe that this thread maps to (for reading the RT radiance buffer)
    int probeIndex = DDGIGetProbeIndex(DispatchThreadID.xy, DDGIVolume.probeGridCounts, PROBE_NUM_TEXELS);
    if (probeIndex < 0)
    {
        exitEarly = true; // Probe doesn't exist
    }

#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
    int storageProbeIndex = DDGIGetProbeIndexOffset(probeIndex, DDGIVolume.probeGridCounts, DDGIVolume.probeScrollOffsets);
    int2 texelPosition = DDGIGetProbeTexelPosition(storageProbeIndex, DDGIVolume.probeGridCounts);

    uint3 prevProbeSpace;
    prevProbeSpace.x = DDGIProbeScrollSpace[texelPosition].x & 0x01;
    prevProbeSpace.y = (DDGIProbeScrollSpace[texelPosition].x & 0x02) >> 1;
    prevProbeSpace.z = (DDGIProbeScrollSpace[texelPosition].x & 0x04) >> 2;

    uint3 probeSpace = uint3(0, 0, 0);

    int3 probeGridCoord = DDGIGetProbeCoords(probeIndex, DDGIVolume.probeGridCounts);
    probeSpace = (probeGridCoord + DDGIVolume.probeScrollOffsets) / (DDGIVolume.probeGridCounts);
    probeSpace = probeSpace % 2;

#if RTXGI_DDGI_PARTIAL_UPDATE_ISV
    if(prevProbeSpace.x == probeSpace.x && prevProbeSpace.y == probeSpace.y && prevProbeSpace.z == probeSpace.z)
        exitEarly = true;
#endif
#endif

#if !RTXGI_DDGI_PARTIAL_UPDATE_ISV
    // Handle round robin updating.
    // If this probe is outside of the window for updating, bail out.
    [branch] if (!exitEarly)
    {
        int numProbes = DDGIVolume.probeGridCounts.x * DDGIVolume.probeGridCounts.y * DDGIVolume.probeGridCounts.z;
        int probeRRIndex = (probeIndex < ProbeIndexStart) ? probeIndex + numProbes : probeIndex;
        if (probeRRIndex >= ProbeIndexStart + ProbeIndexCount)
            exitEarly = true;
    }
#endif

    uint2 probeTexCoords = 0;

    [branch] if (!exitEarly)
    {
#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
        int storageProbeIndex = DDGIGetProbeIndexOffset(probeIndex, DDGIVolume.probeGridCounts, DDGIVolume.probeScrollOffsets);
        // Transform the probe index into probe texel coordinates
        // Offset 1 texel on X and Y to account for the 1 texel probe border
        uint2 intraProbeTexelOffset = DispatchThreadID.xy % uint2(PROBE_NUM_TEXELS, PROBE_NUM_TEXELS);
        probeTexCoords = DDGIGetThreadBaseCoords(storageProbeIndex, DDGIVolume.probeGridCounts, PROBE_NUM_TEXELS) + intraProbeTexelOffset;
        probeTexCoords.xy = probeTexCoords.xy + uint2(1, 1) + (probeTexCoords.xy / PROBE_NUM_TEXELS) * 2;
#else
        int storageProbeIndex = probeIndex;
        // Transform the thread dispatch index into probe texel coordinates
        // Offset 1 texel on X and Y to account for the 1 texel probe border
        probeTexCoords = DispatchThreadID.xy + uint2(1, 1);
        probeTexCoords.xy += (DispatchThreadID.xy / PROBE_NUM_TEXELS) * 2;
#endif

#if RTXGI_DDGI_PROBE_CLASSIFICATION
        int2 texelPosition = DDGIGetProbeTexelPosition(storageProbeIndex, DDGIVolume.probeGridCounts);
        int  probeState = DDGIVolumeProbeStatesTexture[texelPosition];
        if (probeState == PROBE_STATE_INACTIVE)
        {
            exitEarly = true; // If the probe is inactive, do not blend (it didn't shoot rays to get new radiance values)
        }
#endif // RTXGI_DDGI_PROBE_CLASSIFICATION
    }

#if RTXGI_DDGI_BLEND_RADIANCE && RTXGI_DDGI_DEBUG_PROBE_INDEXING && (RTXGI_DDGI_FORMAT_IRRADIANCE == 1)
    // Visualize the probe index
    DDGIVolumeProbeDataUAV[probeTexCoords] = float4(probeIndex, 0, 0, 1);
    return;
#endif

    float2 probeOctantUV = float2(0.f, 0.f);

#if RTXGI_DDGI_BLEND_RADIANCE && RTXGI_DDGI_DEBUG_OCTAHEDRAL_INDEXING
    probeOctantUV = DDGIGetNormalizedOctahedralCoordinates(int2(DispatchThreadID.xy), PROBE_NUM_TEXELS);
    if (all(abs(probeOctantUV) <= 1.f))
    {
        float3 probeDirection = DDGIGetOctahedralDirection(probeOctantUV);
        probeDirection = (abs(probeDirection) >= 0.001f) * sign(probeDirection);    // Robustness for when the octant size is not a power of 2.
        result = float4((probeDirection * 0.5f) + 0.5f, 1.f);
    }
    DDGIVolumeProbeDataUAV[probeTexCoords] = result;
    return;
#endif

    // Get the probe ray direction associated with this thread
    probeOctantUV = DDGIGetNormalizedOctahedralCoordinates(int2(DispatchThreadID.xy), PROBE_NUM_TEXELS);
    float3 probeRayDirection = DDGIGetOctahedralDirection(probeOctantUV);

#if RTXGI_DDGI_SHARED_MEMORY
    [branch] if (!exitEarly)
    {
        // Cooperatively load the ray traced radiance and hit distance values into shared memory
        // Cooperatively compute the probe ray directions
        int totalIterations = int(ceil(float(RAYS_PER_PROBE) / float(PROBE_NUM_TEXELS * PROBE_NUM_TEXELS)));
        for (int iteration = 0; iteration < totalIterations; iteration++)
        {
            int rayIndex = (GroupIndex * totalIterations) + iteration;
            if (rayIndex >= RAYS_PER_PROBE) break;

        #if RTXGI_DDGI_BLEND_RADIANCE
            #if (RTXGI_DDGI_FORMAT_RADIANCE == 1)
                RayRadiance[rayIndex] = DDGIVolumeRayDataUAV[int2(rayIndex, probeIndex)].rgb;
            #else
                RayRadiance[rayIndex] = RTXGIUintToFloat3(asuint(DDGIVolumeRayDataUAV[int2(rayIndex, probeIndex)].r));
            #endif
        #endif

        #if (RTXGI_DDGI_FORMAT_RADIANCE == 1)
            RayDistance[rayIndex] = DDGIVolumeRayDataUAV[int2(rayIndex, probeIndex)].a;
        #else
            RayDistance[rayIndex] = DDGIVolumeRayDataUAV[int2(rayIndex, probeIndex)].g;
        #endif

            RayDirection[rayIndex] = DDGIGetProbeRayDirection(rayIndex, DDGIVolume.numRaysPerProbe, DDGIVolume.probeRayRotationTransform);
        }
    }

    // Wait for all threads in the group to finish shared memory operations
    GroupMemoryBarrierWithGroupSync();
#endif // RTXGI_DDGI_SHARED_MEMORY

    if (exitEarly)
    {
        return;
    }

#if RTXGI_DDGI_BLEND_RADIANCE
    // Backface hits are ignored when blending radiance
    // Allow a maximum of 10% of the rays to hit backfaces. If that limit is exceeded, don't blend anything into this probe.
    uint backfaces = 0;
    uint maxBackfaces = DDGIVolume.numRaysPerProbe * 0.1f;
#endif

    int rayIndex = 0;
#if RTXGI_DDGI_PROBE_RELOCATION || RTXGI_DDGI_PROBE_CLASSIFICATION
    rayIndex = RTXGI_DDGI_NUM_FIXED_RAYS;
#endif

    // Blend radiance or distance values from each ray to compute irradiance or fitered distance
    for ( /*rayIndex*/; rayIndex < DDGIVolume.numRaysPerProbe; rayIndex++)
    {
        // Get the direction for this probe ray
    #if RTXGI_DDGI_SHARED_MEMORY
        float3 rayDirection = RayDirection[rayIndex];
    #else
        float3 rayDirection = DDGIGetProbeRayDirection(rayIndex, DDGIVolume.numRaysPerProbe, DDGIVolume.probeRayRotationTransform);
    #endif

        // Find the weight of the contribution for this ray
        // Weight is based on the cosine of the angle between the ray direction and the direction of the probe octant's texel
        float weight = max(0.f, dot(probeRayDirection, rayDirection));

        // The indices of the probe ray in the radiance buffer
        int2 probeRayIndex = int2(rayIndex, probeIndex);

    #if RTXGI_DDGI_BLEND_RADIANCE
        // Load the ray traced radiance and hit distance
        #if RTXGI_DDGI_SHARED_MEMORY
            float3 probeRayRadiance = RayRadiance[rayIndex];
            float  probeRayDistance = RayDistance[rayIndex];
        #else
            #if (RTXGI_DDGI_FORMAT_RADIANCE == 1)
                float3 probeRayRadiance = DDGIVolumeRayDataUAV[probeRayIndex].rgb;
                float  probeRayDistance = DDGIVolumeRayDataUAV[probeRayIndex].a;
            #else
                float3 probeRayRadiance = RTXGIUintToFloat3(asuint(DDGIVolumeRayDataUAV[int2(rayIndex, probeIndex)].r));
                float  probeRayDistance = DDGIVolumeRayDataUAV[probeRayIndex].g;
            #endif
        #endif

        // Backface hit, don't blend this sample
        if (probeRayDistance < 0.f)
        {
            backfaces++;
            if (backfaces >= maxBackfaces) return;
            continue;
        }

        // Blend the ray's radiance
        result += float4(probeRayRadiance * weight, weight);

    #else // !RTXGI_DDGI_BLEND_RADIANCE

        // Initialize the probe hit distance to three quarters of the distance of the grid cell diagonal
        float probeMaxRayDistance = length(DDGIVolume.probeGridSpacing) * 1.5f;

        // Increase or decrease the filtered distance value's "sharpness"
        weight = pow(weight, DDGIVolume.probeDistanceExponent);

        // Load the ray traced distance
        #if RTXGI_DDGI_SHARED_MEMORY
            float probeRayDistance = min(abs(RayDistance[rayIndex]), probeMaxRayDistance);
        #else
            // HitT is negative on backface hits for the probe relocation, take the absolute value
            #if (RTXGI_DDGI_FORMAT_RADIANCE == 1)
                float probeRayDistance = min(abs(DDGIVolumeRayDataUAV[probeRayIndex].a), probeMaxRayDistance);
            #else
                float probeRayDistance = min(abs(DDGIVolumeRayDataUAV[probeRayIndex].g), probeMaxRayDistance);
            #endif
        #endif

        // Filter the ray distance
        result += float4(probeRayDistance * weight, (probeRayDistance * probeRayDistance) * weight, 0.f, weight);
    #endif
    }

    // Normalize the blended irradiance (or filtered distance), if the combined weight is not close to zero.
    // To match the Monte Carlo Estimator for Irradiance, we should divide by N. Instead, we are dividing by
    // N * sum(cos(theta)) (the sum of the weights) to reduce variance.
    // To account for this, we must mulitply in a factor of 1/2.
    const float epsilon = 1e-9f * float(DDGIVolume.numRaysPerProbe);
    result.rgb *= 1.f / max(2.f * result.a, epsilon);

    float  hysteresis = DDGIVolume.probeHysteresis;
    float3 previous = DDGIVolumeProbeDataUAV[probeTexCoords].rgb;

#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
#if (RTXGI_DDGI_BLEND_RADIANCE == 0) // distance blend is after irradiance blend. so write only in distance blend.
    if (DispatchThreadID.x % PROBE_NUM_TEXELS == 0 && DispatchThreadID.y % PROBE_NUM_TEXELS== 0)
    {
        uint probeSpacePacked = 0;
        probeSpacePacked = probeSpace.x;
        probeSpacePacked |= probeSpace.y << 1;
        probeSpacePacked |= probeSpace.z << 2;
        DDGIProbeScrollSpace[texelPosition] = probeSpacePacked;
    }
#endif

#endif

#if RTXGI_DDGI_BLEND_RADIANCE
    // Tone-mapping gamma adjustment
    result.rgb = pow(result.rgb, DDGIVolume.probeInverseIrradianceEncodingGamma);
#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
    if (probeSpace.x == prevProbeSpace.x && probeSpace.y == prevProbeSpace.y && probeSpace.z == prevProbeSpace.z)
    {
#endif
        if (RTXGIMaxComponent(previous.rgb - result.rgb) > DDGIVolume.probeChangeThreshold)
        {
            // Lower the hysteresis when a large lighting change is detected
            hysteresis = max(0.f, hysteresis - 0.75f);
        }

        float3 delta = (result.rgb - previous.rgb);
        if (length(delta) > DDGIVolume.probeBrightnessThreshold)
        {
            // Clamp the maximum change in irradiance when a large brightness change is detected
            result.rgb = previous.rgb + (delta * 0.25f);
        }

        // Interpolate the new blended irradiance with the existing irradiance in the probe.
        // A high hysteresis value emphasizes the existing probe irradiance.
        //
        // When using lower bit depth formats for irradiance, the difference between lerped values
        // may be smaller than what the texture format can represent. This can stop progress towards
        // the target value when going from high to low values. When darkening, step at least the minimum
        // value the texture format can represent to ensure the target value is reached. The threshold value
        // for 10-bit/channel formats is always used (even for 32-bit/channel formats) to speed up light to
        // dark convergence.
        static const float c_threshold = 1.f / 1024.f;
        float3 lerpDelta = (1.f - hysteresis) * delta;
        if (RTXGIMaxComponent(result.rgb) < RTXGIMaxComponent(previous.rgb))
        {
            lerpDelta = min(max(c_threshold, abs(lerpDelta)), abs(delta)) * sign(lerpDelta);
        }
        result = float4(previous.rgb + lerpDelta, 1.f);

#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
    }
#endif
#else

    // Interpolate the new filtered distance with the existing filtered distance in the probe.
    // A high hysteresis value emphasizes the existing probe filtered distance.
#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
    if (probeSpace.x == prevProbeSpace.x && probeSpace.y == prevProbeSpace.y && probeSpace.z == prevProbeSpace.z)
    {
#endif
       result = float4(lerp(result.rgb, previous.rgb, hysteresis), 1.f);
#if RTXGI_DDGI_INFINITE_SCROLLING_VOLUME
    }
#endif

#endif

    DDGIVolumeProbeDataUAV[probeTexCoords] = result;
}
